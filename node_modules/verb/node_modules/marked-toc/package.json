{
  "name": "marked-toc",
  "description": "Generate a markdown TOC (table of contents), using the [marked.js](https://github.com/chjj/marked) lexer and parser.",
  "version": "0.2.6",
  "homepage": "https://github.com/jonschlinkert/marked-toc",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jonschlinkert/marked-toc.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/marked-toc/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jonschlinkert/marked-toc/blob/master/LICENSE-MIT"
    }
  ],
  "bin": {
    "toc": "./bin/toc"
  },
  "main": "index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "devDependencies": {
    "chai": "~1.9.0",
    "mocha": "~1.17.1"
  },
  "dependencies": {
    "fs-utils": "~0.4.0",
    "globule": "~0.2.0",
    "gray-matter": "~0.3.5",
    "lodash": "~2.4.1",
    "marked": "0.3.0",
    "template": "~0.1.6",
    "uslug": "~1.0.3"
  },
  "keywords": [
    "readme",
    "markdown",
    "toc",
    "table of contents"
  ],
  "readme": "# marked-toc [![NPM version](https://badge.fury.io/js/marked-toc.png)](http://badge.fury.io/js/marked-toc)\r\n\r\n> Generate a TOC (table of contents) for markdown files\r\n\r\n_(example)_\r\n<!-- toc -->\r\n* [Getting Started](#getting-started)\r\n* [Usage](#usage)\r\n* [Options](#options)\r\n  * [template](#template)\r\n  * [bullet](#bullet)\r\n  * [firsth1](#firsth1)\r\n  * [omit](#omit)\r\n  * [clean](#clean)\r\n  * [blacklist](#blacklist)\r\n  * [allowedChars](#allowedchars)\r\n* [API](#api)\r\n  * [toc](#toc)\r\n  * [toc.insert](#tocinsert)\r\n  * [toc.add](#tocadd)\r\n  * [toc.raw](#tocraw)\r\n* [Contributing](#contributing)\r\n* [Author](#author)\r\n* [License](#license)\r\n\r\n<!-- toc stop -->\r\n\r\n## Getting Started\r\n\r\nInstall the module with [npm](npmjs.org):\r\n\r\n```bash\r\nnpm i marked-toc --save\r\n```\r\n\r\nIn any markdown file, add `<!-- toc -->` where you want to add the TOC. Then in the command line, run:\r\n\r\n```bash\r\ntoc [filename]\r\n```\r\n\r\nTo add a TOC to your project's README.md, add `<!-- toc -->` and run:\r\n\r\n```bash\r\ntoc\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar toc = require('marked-toc');\r\nvar file = fs.readFileSync('README.md', 'utf8');\r\n\r\n// Generate a TOC\r\ntoc(file);\r\n```\r\n\r\n## Options\r\n\r\nAll methods accept an object of options as the last argument.\r\n\r\n### template\r\n\r\nType: `String`\r\n\r\nDefault: `<%= depth %><%= bullet %>[<%= heading %>](#<%= url %>)\\n`\r\n\r\nThe Lo-Dash template used to generate the Table of Contents.\r\n\r\n**Example (this is the default):**\r\n\r\n```js\r\nvar tmpl = '<%= depth %><%= bullet %>[<%= heading %>](#<%= url %>)\\n';\r\ntoc(file, {template: tmpl});\r\n```\r\n\r\n### bullet\r\n\r\nType: `String`\r\n\r\nDefault: `* `\r\n\r\nThe bullet to use for each item in the generated TOC. This is passed as a variable to the `<%= bullet %>` template.\r\n\r\n\r\n### firsth1\r\n\r\nType: `Boolean`\r\n\r\nDefault: `False`\r\n\r\nInclude the first h1-level heading in a file. For example, this prevent the first heading in a README from showing up in the TOC.\r\n\r\n\r\n### omit\r\n\r\nType: `Array`\r\n\r\nDefault: `['Table of Contents', 'TOC', 'TABLE OF CONTENTS']`\r\n\r\nOmit entire headings from the TOC if they have these strings.\r\n\r\n### clean\r\n\r\nType: `Array`\r\n\r\nDefault: `['mixin', 'helper', 'filter']`\r\n\r\nStrip \"blacklisted\" keywords from the headings.\r\n\r\n**Example:**\r\n\r\n```js\r\ntoc(file, {clean: ['docs', 'methods']});\r\n```\r\n\r\nconverts this:\r\n\r\n```markdown\r\n## docs-foo\r\nFoo\r\n\r\n## methods-bar\r\nBar\r\n\r\n```\r\nto:\r\n\r\n```markdown\r\n* [foo](#docs-foo)\r\n* [bar](#methods-bar)\r\n\r\n```\r\n\r\n### blacklist\r\n\r\nType: `Boolean`\r\n\r\nDefault: `true`\r\n\r\nAn array of strings used the `omit` option:\r\n\r\n```js\r\n['grunt', 'helper', 'handlebars-helper', 'mixin', 'filter', 'assemble-contrib', 'assemble']\r\n```\r\n\r\n_(These strings are used a lot in documentation headings, but (usually) shouldn't show up in the gererated TOC.)_\r\n\r\n\r\n### allowedChars\r\n\r\nType: `String`\r\n\r\nDefault: `-`\r\n\r\nString of chars that you want to be whitelisted when headings are \"slugified\" for links, e.g. `-_~`.\r\n\r\n**Example:**\r\n\r\n```markdown\r\n// This heading\r\n# Getting Started\r\n\r\n// Converts to this link\r\n* [Getting Started](#getting-started)\r\n\r\n```\r\n\r\n## API\r\n\r\nMost methods expect a string as the first paramter, so unless otherwise noted, assume that each example gets the `str` variable from:\r\n\r\n\r\n```js\r\nvar str = fs.readFileSync('README.md', 'utf8')\r\n```\r\n\r\n### toc\r\n\r\nGenerates a Table of Contents from a string.\r\n\r\n```js\r\n// Generate a TOC\r\nvar table = toc(str);\r\nfs.writeFileSync('toc.md', table);\r\n```\r\n\r\n### toc.insert\r\n\r\nInject a TOC at the insertion point in a string, `<!-- toc -->`.\r\n\r\n**Params:**\r\n\r\n* `str`: the content\r\n* `options`: object of options\r\n\r\n```js\r\ntoc.insert(str, options);\r\n```\r\n\r\n### toc.add\r\n\r\n1. Read a file and inject a TOC at the specified insertion point, `<!-- toc -->`,\r\n2. Write the file to the specified `dest`, _(or re-write back to the source file if no `dest` is passed)_\r\n\r\n```js\r\ntoc.add(src, dest, options)\r\n```\r\n\r\n**Example:**\r\n\r\n```js\r\ntoc.add('path/to/source.md', 'path/to/dest.md');\r\n```\r\n\r\n**Source only:**\r\n\r\n```js\r\ntoc.add('README.md');\r\n```\r\n\r\n### toc.raw\r\n\r\nOutput a \"raw\" (JSON) Table of Contents **object**, for customization and usage in templates\r\n\r\n```js\r\ntoc.raw(str, options);\r\n```\r\n\r\nReturns an object (JSON) with two properties, `data` and `toc`:\r\n\r\n* `data`: array of headings and associated properties used to construct a TOC. **TIP**: this can be extended with properties, such as src path etc.\r\n* `toc`: the actual Table of Contents result, as a string\r\n\r\n**Example:**\r\n\r\n```json\r\n{\r\n  // Array of\r\n  \"data\": [\r\n    {\r\n      \"depth\": \"\",\r\n      \"bullet\": \"* \",\r\n      \"heading\": \"Getting Started\",\r\n      \"url\": \"getting-started\"\r\n    },\r\n    {\r\n      \"depth\": \"\",\r\n      \"bullet\": \"* \",\r\n      \"heading\": \"Usage\",\r\n      \"url\": \"usage\"\r\n    }\r\n  ],\r\n\r\n  // String. the actual TOC\r\n  \"toc\": \"* [Getting Started](#getting-started)\\n* [Options](#options)\\n* [Contributing](#contributing)\\n\"\r\n}\r\n```\r\n\r\nSee [an example](./examples/toc.json).\r\n\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint your code using [jshint](jshint.com) and run tests with `mocha -R spec` before making a pull request.\r\n\r\n## Author\r\n\r\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\r\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\n## License\r\nCopyright (c) 2014 Jon Schlinkert, contributors\r\nLicensed under the MIT license.\r\n",
  "readmeFilename": "README.md",
  "_id": "marked-toc@0.2.6",
  "dist": {
    "shasum": "198b69a6b542d997ef2864516e4304451056277f"
  },
  "_from": "marked-toc@^0.2.5",
  "_resolved": "https://registry.npmjs.org/marked-toc/-/marked-toc-0.2.6.tgz"
}
